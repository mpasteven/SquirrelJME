plugins
{
	// C++ needs to be first otherwise the build will break
	id "cpp-library"
	id "java-library"
	id "java-test-fixtures"
}

description = "This library provides the base support for testing and " +
	"running SquirrelJME on a Java SE host, which is normally not " +
	"capable of doing as such."

// Although it would be useful to use Java 8, we have to stay on Java 7
// because SquirrelJME is a Java 7 VM.
compileJava
{
	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7
}

// Due to the combination of C++ and Java these dependencies have to be very
// specific in that they only refer to the Java or C++ portion. So
// "implementation" and "compile" cannot be used because the C++ library will
// try to use them during compilation.
dependencies
{
	// We need these two modules to obtain the SquirrelJME specific classes
	compileClasspath project(":modules:cldc-compact")
	compileClasspath project(":modules:common-vm")
	compileClasspath project(":modules:io")
	compileClasspath project(":modules:tac")
	compileClasspath project(":modules:zip")
	compileClasspath project(":modules:debug-jdwp")

	// And for run-time to be able to be ran
	runtimeClasspath project(":modules:cldc-compact")
	runtimeClasspath project(":modules:common-vm")
	runtimeClasspath project(":modules:io")
	runtimeClasspath project(":modules:tac")
	runtimeClasspath project(":modules:zip")
	runtimeClasspath project(":modules:debug-jdwp")
}

// We need the native library in the JAR before we can properly use it
// But we can compile the Java code just fine without it
boolean useDebugLib = false
jar {
	dependsOn (useDebugLib ? "assembleDebug" : "assembleRelease")
	
	java.nio.file.Path libPath = buildDir.toPath().resolve("lib")
		.resolve("main").resolve((useDebugLib ? "debug" : "release"))
	project.ext.libPathBase = libPath

	from libPath.toFile()
	into "/"
}

java
{
	javadoc.options.tags = [ "squirreljme.property",
		"squirreljme.env",
		"squirreljme.error",
		"squirreljme.syscallparam",
		"squirreljme.syscallreturn",
		"squirreljme.tsiparam",
		"squirreljme.configtype",
		"squirreljme.uiwidgetparam" ]
}

// Improve debugging with native code compiles, these are only used by the
// build system tests so these do not impact users at all
tasks.withType(CppCompile).configureEach() {item ->
	// Never do this for release!
	if (item.name.toLowerCase().contains("release")) {
		return
	}

	item.debuggable = true
	item.optimized = false
	
	// Additional compiler options for each compiler
	item.compilerArgs.addAll toolChain.map { toolChain ->
		// Microsoft Visual C++
		if ("visualCpp".equalsIgnoreCase(toolChain.name)) {
			return [
				// Disable optimization
				"/Od",
			
				// Buffer security check
				"/GS",
				
				// Run-time error checking
				"/RTC",
				
				// Enable all warnings
				"/Wall",
				
				// Our object files contain _full_ debug info
				"/Z7",
				
				// End
				]
		}
		
		return []
	}
}

// Ensure debugging information is used when linking
tasks.withType(LinkSharedLibrary).configureEach() { item ->
	// Never do this for release!
	if (item.name.toLowerCase().contains("release")) {
		return
	}
	
	item.getDebuggable().set(true)
	
	// Additional compiler options for each compiler
	item.linkerArgs.addAll toolChain.map { toolChain ->
		// Microsoft Visual C++
		if ("visualCpp".equalsIgnoreCase(toolChain.name)) {
			return [
				// Full debug info
				"/DEBUG:FULL",
				
				// Create map file
				"/MAP"
			
				// End
				]
		}
		
		return []
	}
}
